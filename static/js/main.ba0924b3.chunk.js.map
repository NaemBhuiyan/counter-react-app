{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","this","props","counter","onIncrement","onDecriment","onDelete","index","title","console","log","Fragment","className","getClasses","formateCount","onClick","classes","value","Component","Counters","state","onReset","counters","onAddItem","onSubmit","e","preventDefault","setState","type","placeholder","aria-label","aria-describedby","onChange","target","id","map","key","Navbar","totalCounter","app","handleAddItem","handleRset","handleDelete","deletedIndex","filter","handlerCounter","indexOf","hanndleDecriment","c","length","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba0924b3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    const {\r\n      counter,\r\n      onIncrement,\r\n      onDecriment,\r\n      onDelete,\r\n      index,\r\n      title\r\n    } = this.props;\r\n    console.log(\"app - counter\");\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h4 className=\"bg-200\">Item #{title} </h4>\r\n        <span className={this.getClasses()}>{this.formateCount()}</span>\r\n        <button\r\n          onClick={() => onDecriment(counter)}\r\n          className=\"btn btn-dark btn-sm mr-2\">\r\n          Decriment\r\n        </button>\r\n        <button\r\n          onClick={() => onIncrement(counter)}\r\n          className=\"btn btn-info btn-sm\">\r\n          Increament\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => onDelete(index)}\r\n          className=\"btn btn-danger btn-sm m-2\">\r\n          Delete\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getClasses() {\r\n    let classes = \"badge m-3 p-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formateCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n  render() {\r\n    const {\r\n      onReset,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecriment,\r\n      counters,\r\n      onAddItem\r\n    } = this.props;\r\n\r\n    console.log(this.props);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"card my-3 shadow-lg\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <div className=\"col-5\">\r\n                <form\r\n                  onSubmit={e => {\r\n                    e.preventDefault();\r\n                    onAddItem(this.state.title);\r\n                    this.setState({\r\n                      title: \"\"\r\n                    });\r\n                  }}>\r\n                  <div className=\"input-group \">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Your Item Name EX:Hard disk\"\r\n                      aria-label=\"Recipient's username\"\r\n                      aria-describedby=\"button-addon2\"\r\n                      value={this.state.title}\r\n                      onChange={({ target }) =>\r\n                        this.setState({ title: target.value })\r\n                      }\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                      <button\r\n                        onClick={() => onAddItem(this.state.title)}\r\n                        className=\"btn btn-secondary\"\r\n                        type=\"button\"\r\n                        id=\"button-addon2\">\r\n                        Add Item\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"col-3\">\r\n                <button onClick={onReset} className=\"btn btn-primary\">\r\n                  Reset\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* <button onClick={onAddItem} className=\"btn btn-info m-2\">\r\n              Add item\r\n            </button> */}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          {counters.map((counter, index) => (\r\n            <div className=\"col-lg-4 mb-3\">\r\n              <div className=\"card shadow bg-light\">\r\n                <div className=\"card-body\">\r\n                  <Counter\r\n                    key={index}\r\n                    onDelete={onDelete}\r\n                    onIncrement={onIncrement}\r\n                    onDecriment={onDecriment}\r\n                    counter={counter}\r\n                    title={counter.title}\r\n                    index={index}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\r\nconst Navbar = ({ totalCounter }) => {\r\n  console.log(\"render-Navbar\");\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand mb-0 text-secondary\">\r\n        Your total Elemnet{\" \"}\r\n        <span className=\"badge badge-pill badge-warning\">{totalCounter}</span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport Counters from \"./components/counters\";\nimport Navbar from \"./components/navbar\";\n\nclass app extends Component {\n  state = {\n    counters: [\n      { title: 1, value: 0 },\n      { title: 2, value: 5 },\n      { title: 3, value: 6 },\n      { title: 4, value: 7 }\n    ]\n  };\n  constructor(props) {\n    super(props);\n    console.log(\"app-Counstructor\", props);\n  }\n  componentDidMount() {\n    console.log(\"app -componentDidMount \");\n  }\n\n  handleAddItem = title => {\n    // const test = this.state.counters[-1];\n    // const addItemIdValue = counters[counters.length - 1].id + 1;\n    // console.log(addItemIdValue);\n    // counters.push();\n\n    this.setState({\n      counters: [...this.state.counters, { title, value: 0 }]\n    });\n  };\n\n  handleRset = () => {\n    const counters = this.state.counters.map(counter => {\n      counter.value = 0;\n      return counter;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = deletedIndex => {\n    const counters = this.state.counters.filter(\n      (counter, index) => deletedIndex != index\n    );\n    this.setState({ counters });\n  };\n\n  handlerCounter = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({\n      counters\n    });\n  };\n  hanndleDecriment = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value--;\n    if (counters[index].value >= 0) {\n      this.setState({\n        counters\n      });\n    }\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totalCounter={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleRset}\n            onIncrement={this.handlerCounter}\n            onAddItem={this.handleAddItem}\n            onDelete={this.handleDelete}\n            onDecriment={this.hanndleDecriment}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render( < App / > , document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}